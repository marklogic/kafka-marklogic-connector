buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    // Add jaxen to buildscript classpath to prevent NoClassDefFoundError when shadow plugin interferes with
    // ml-data-hub plugin execution. It is not yet known why the shadow plugin causes this problem or why it's
    // specific to the jaxen library, but this resolves the problem.
    classpath 'jaxen:jaxen:2.0.0'
  }
}

plugins {
  id 'java'
  id 'net.saliman.properties' version '1.5.2'
  id 'com.gradleup.shadow' version '9.2.2'

  // Only used for testing
  id 'jacoco'
  id "org.sonarqube" version "5.1.0.4882"

  // Used to generate Avro classes. This will write classes to build/generated-test-avro-java and also add that folder
  // as a source root. Since this is commented out by default, the generated Avro test class has been added to
  // src/test/java. This only needs to be uncommented when there's a need to regenerate that class, at which point it
  // should be copied over to src/test/java and then this plugin should be commented out again.
  // id "com.github.davidmc24.gradle.plugin.avro" version "1.6.0"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}



repositories {
  mavenCentral()
}

configurations {
  documentation
  assets

  configurations.all {
    resolutionStrategy {
      // Force v4.5.0 of commons-collections4 to avoid CVEs in v4.4.0 from transitive dependecies:
      // CVE-2025-48924 (https://www.cve.org/CVERecord?id=CVE-2025-48924) and
      // CVE-2020-15250 (https://www.cve.org/CVERecord?id=CVE-2020-15250)
      force "org.apache.commons:commons-collections4:4.5.0"

      // Force v3.19 of commons-lang3 to avoid CVE-2025-48924 (https://www.cve.org/CVERecord?id=CVE-2025-48924), which
      // is caused by the use of avro-compiler v1.12.0 with older dependencies including commons-lang3 v3.12.0.
      force 'org.apache.commons:commons-lang3:3.19.0'

      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        // Force v12.1.1 of jetty-http to avoid CVE-2025-5115
        // (https://nvd.nist.gov/vuln/detail/CVE-2025-5115), which is a transitive
        // dependency of Kafka connect-runtime:4.1.0
        // Need to ensure this inclusdes all jetty modules, such as "org.eclipse.jetty.ee10"
        if (details.requested.group.startsWith("org.eclipse.jetty") && details.requested.version.startsWith("12")) {
          details.useVersion "12.1.1"
          details.because "Bumping from 12.0.22 (what Kafka connect-runtime:4.1.0 depends on) to 12.1.1 to eliminate CVEs."
        }

        // Force v4.2.6.Final of netty-all to avoid CVE-2025-58057
        // (https://www.cve.org/CVERecord?id=CVE-2025-58057), which is a transitive
        // dependency of marklogic-data-hub:6.2.1      
        if (details.requested.group.equals("io.netty") && details.requested.version.startsWith("4")) {
          details.useVersion "4.2.6.Final"
          details.because "Bumping from 4.1.0 (what marklogic-data-hub:6.2.1 depends on) to 4.2.6.Final to eliminate CVEs."
        }
      }
    }
  }
}

ext {
  kafkaVersion = "4.1.0"
}

dependencies {
  def kafkaConnectRuntime = "org.apache.kafka:connect-runtime:${kafkaVersion}"
  compileOnly kafkaConnectRuntime

  // Force DHF to use the latest version of ml-gradle, which minimizes security vulnerabilities
  implementation "com.marklogic:ml-gradle:6.0.1"

  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.19.0"

  // Note that in general, the version of the DHF jar must match that of the deployed DHF instance. Different versions
  // may work together, but that behavior is not guaranteed.
  implementation("com.marklogic:marklogic-data-hub:6.2.1") {
    exclude module: "ml-gradle"
  }

  testImplementation('com.marklogic:marklogic-junit5:1.5.0') {
    // Use the Java Client declared above.
    exclude module: "marklogic-client-api"

    // Use the Spring dependencies from ml-app-deployer 6 to avoid vulnerabilities in Spring 5.
    exclude group: "org.springframework"
  }

  // Add back all required Spring 6 modules for tests, since junit5 and test code need more than just spring-test
  testImplementation "org.springframework:spring-test:6.2.11"
  testImplementation "org.springframework:spring-context:6.2.11"

  testImplementation "org.apache.kafka:connect-json:${kafkaVersion}"
  testImplementation kafkaConnectRuntime

  testImplementation "org.apache.avro:avro-compiler:1.12.0"

  // Forcing logback to be used for test logging
  testImplementation "ch.qos.logback:logback-classic:1.5.18"
  testImplementation "org.slf4j:jcl-over-slf4j:2.0.16"

	// Automatic loading of test framework implementation dependencies is deprecated.
	// https://docs.gradle.org/current/userguide/upgrading_version_8.html#test_framework_implementation_dependencies
	// Without this, once using JUnit 5.12 or higher, Gradle will not find any tests and report an error of:
	// org.junit.platform.commons.JUnitException: TestEngine with ID 'junit-jupiter' failed to discover tests
	testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.13.4"

  documentation files('LICENSE.txt')
  documentation files('NOTICE.txt')
  documentation files('README.md')

  assets files('MarkLogic_logo.png')
  assets files('apache_logo.png')
}

// This ensures that the compiler reports "unchecked" warnings.
// This helps us use the compiler to prevent potential problems.
tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
  options.deprecation = true
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
  jacocoTestReport {
    dependsOn test
    reports {
      xml.required = true
    }
  }

  jacocoTestCoverageVerification {
    violationRules {
      rule {
        limit {
          minimum = 0.0
        }
      }
    }
  }

}

shadowJar {
  // Exclude DHF source files
  exclude "hub-internal-artifacts/**"
  exclude "hub-internal-config/**"
  exclude "ml-config/**"
  exclude "ml-modules*/**"
  exclude "scaffolding/**"
}

ext {
  confluentArchiveGroup = "Confluent Connector Archive"
  confluentTestingGroup = "Confluent Platform Local Testing"
  baseArchiveBuildDir = "build/connectorArchive"
  baseArchiveName = "${componentOwner}-${componentName}-${version}"
}

// Tasks for building the archive required for submitting to the Confluence Connector Hub

import org.apache.tools.ant.filters.ReplaceTokens

task connectorArchive_CopyManifestToBuildDirectory(type: Copy, group: confluentArchiveGroup) {
  description = "Copy the project manifest into the root folder"
  from '.'
  include 'manifest.json'
  into "${baseArchiveBuildDir}/${baseArchiveName}"
  filter(ReplaceTokens, tokens: [CONFLUENT_USER: componentOwner, VERSION: version])
}

task connectorArchive_CopyAssetsToBuildDirectory(type: Copy, group: confluentArchiveGroup) {
  description = "Copy the project assets into the assets folder"
  from configurations.assets
  into "${baseArchiveBuildDir}/${baseArchiveName}/assets"
}

task connectorArchive_CopyEtcToBuildDirectory(type: Copy, group: confluentArchiveGroup) {
  description = "Copy the project support files into the etc folder"
  from 'config'
  include '*'
  into "${baseArchiveBuildDir}/${baseArchiveName}/etc"
}

task connectorArchive_CopyDocumentationToBuildDirectory(type: Copy, group: confluentArchiveGroup) {
  description = "Copy the project documentation into the doc folder"
  from configurations.documentation
  into "${baseArchiveBuildDir}/${baseArchiveName}/doc"
}

task connectorArchive_CopyDependenciesToBuildDirectory(type: Copy, group: confluentArchiveGroup, dependsOn: jar) {
  description = "Copy the dependency jars into the lib folder"
  from jar
  // Confluent already includes the Jackson dependencies that this connector depends on. If the connector includes any
  // itself, and the DHF integration is used with the sink connector, then the following error will occur when DHF
  // tries to connect to the Manage API of MarkLogic:
  // java.lang.ClassCastException: com.fasterxml.jackson.datatype.jdk8.Jdk8Module cannot be cast to com.fasterxml.jackson.databind.Module
  //	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.registerWellKnownModulesIfAvailable(Jackson2ObjectMapperBuilder.java:849)
  // stackoverflow indicates this may be due to multiple copies of Jackson being on the classpath, as Jdk8Module
  // otherwise should be castable to Module.
  // Testing has verified that excluding all "jackson-" jars still results in the connector working properly with
  // Confluent 7.3.1. This has no impact on using the connector with plain Apache Kafka which does not rely on
  // constructing this connector archive.
  from configurations.runtimeClasspath.findAll { it.name.endsWith('jar') && !it.name.startsWith("jackson-")}
  into "${baseArchiveBuildDir}/${baseArchiveName}/lib"
}

task connectorArchive_BuildDirectory(group: confluentArchiveGroup) {
  description = "Build the directory that will be used to create the Kafka Connector Archive"
  dependsOn = [
    connectorArchive_CopyManifestToBuildDirectory,
    connectorArchive_CopyDependenciesToBuildDirectory,
    connectorArchive_CopyDocumentationToBuildDirectory,
    connectorArchive_CopyEtcToBuildDirectory,
    connectorArchive_CopyAssetsToBuildDirectory
  ]
}

task connectorArchive(type: Zip, dependsOn: connectorArchive_BuildDirectory, group: confluentArchiveGroup) {
  description = 'Build a Connector Hub for the Confluent Connector Hub'
  from "${baseArchiveBuildDir}"
  include '**/*'
  archiveFileName = "${baseArchiveName}.zip"
  destinationDirectory = file('build/distro')
}

// Tasks for using the connector with Confluent Platform on Docker

task copyConnectorToDockerVolume(type: Copy, dependsOn: connectorArchive, group: confluentTestingGroup) {
  description = "Copies the connector's archive directory to the Docker volume shared with the Connect server"
  from "build/connectorArchive"
  into "./docker/confluent-marklogic-components"
}
